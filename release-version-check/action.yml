name: "Release Version Check"
inputs:
  release-type:
    description: "Release options"
    required: true
  project-type:
    description: ""
    required: true
  file:
    description: ""
    required: true
  monorepo:
    description: "Identifies if the github repo is a monorepo"
    required: false
    default: "false"
  monorepo-project:
    description: "Identifies the monorepo project"
    required: false
    default: ""
  override-version:
    description: "Override the current version"
    required: false
    default: ""
outputs:
  description: "The new version being released"
  version: ${{ steps.new-version.outputs.version }}
runs:
  using: "composite"
  steps:
    - name: Input validation
      run: |
        release_valid_inputs=("Initial Release" "Redeploy" "Dry Run")
        if [[ ! "${release_valid_inputs[@]}" =~ "${{ inputs.release-type }}" ]]; then
          echo "[!] 'release-type' option only supports the following values: (${release_valid_inputs})"
          exit 1
        fi

        project_type_valid_inputs=("ts" "csharp")
        if [[ ! "${project_type_valid_inputs[@]}" =~ "${{ inputs.project-type }}" ]]; then
          echo "[!] 'project-type' option only supports the following values: (${project_type_valid_inputs})"
          exit 1
        fi

        if [ ! -f "${{ inputs.file }}" ]; then
          echo "[!] The relative path '${{ inputs.file}}' doesn't exist"
          exit 1
        fi

        monorepo_valid_inputs=("true" "false")
        if [[ ! "${monorepo_valid_inputs[@]}" =~ "${{ inputs.monorepo }}" ]]; then
          echo "[!] 'monorepo' option only supports the following values: (${monorepo_valid_inputs})"
          exit 1
        fi

        if [ "${{ inputs.monorepo }}" == "true" ] && [ "${{ inputs.monorepo-project }}" == "" ]; then
          echo "[!] using the 'monorepo' option requires the use of 'monorepo-project'"
          exit 1
        fi


    - name: Get project new version
      id: new-version
      run: |
        # Get version from file depending on project type
        case "${{ inputs.type }}" in
          "ts")
            version=$( jq -r ".version" ${{ inputs.file }})
            ;;
          "csharp")
            version=$( grep -o "<Version>.*</Version>" ${{ inputs.file }} | grep -Eo "[0-9]{4}\.[0-9]{2}\.[0-9]+")
            ;;
        esac
        echo "::set-output name=new-version::$version"


    - name: Get current released version
      id: current-version
      run: |
        if [ "${{ inputs.override-version }}" != "" ]; then
          # Pull the latest 
          case "${{ inputs.monorepo }}" in
            "true")
              previous_release_tag_version=$(
                curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/releases | \
                jq -r 'first(.[] | select(.tag_name | startswith("${{ inputs.monorepo-project }}"))).tag_name'
              )
              ;;
            "false")
              previous_release_tag_version=$(
                curl -sL https://api.github.com/repos/$GITHUB_REPOSITORY/releases/latest | jq -r ".tag_name"
              )
              ;;
          esac
          previous_release_version=${previous_release_tag_version:1}
        else
          previous_release_version=${{ inputs.override-version }}
        fi
        echo "::set-output name=version::$previous_release_version"


    - name: Check versions
      run: |
        new_version=${{ steps.new-version.outputs.version }}
        current_version=${{ steps.current-version.outputs.version }}
        if [ "$new_version" == "$current_version" ] && \
        [ "${{ inputs.release-type }}" == "Initial Release" ]; then
          echo "[!] Already released $new_version. Please bump version to continue"
          exit 1
        fi
